package com.github.upcraftlp.foolslib;

import com.github.upcraftlp.foolslib.api.util.PrefixMessageFactory;
import com.github.upcraftlp.foolslib.proxy.CommonProxy;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import static com.github.upcraftlp.foolslib.FoolsLib.*;

@SuppressWarnings("DefaultAnnotationParam")
@Mod(
        modid = MODID,
        name = MOD_NAME,
        version = VERSION,
        dependencies = DEPENDENCIES,
        updateJSON = UPDATE_JSON,
        guiFactory = GUI_FACTORY,
        certificateFingerprint = FINGERPRINT_KEY,
        acceptedMinecraftVersions = MC_VERSION)
public class FoolsLib {

    public static final String MODID = "foolslib";
    public static final String MOD_NAME = "FoolsLib";
    public static final String VERSION = "@VERSION@";
    public static final String ISSUE_TRACKER = "@ISSUETRACKER@";

    static final String UPDATE_JSON = "@UPDATEJSON@";
    static final String FINGERPRINT_KEY = "@FINGERPRINTKEY@";

    static final String DEPENDENCIES = "required-after:Forge@[11.14.4.1563,11.14.4.1577];";
    static final String MC_VERSION = "1.8";

    private static final String CLIENT_PROXY_CLASS = "com.github.upcraftlp.foolslib.proxy.ClientProxy";
    private static final String SERVER_PROXY_CLASS = "com.github.upcraftlp.foolslib.proxy.ServerProxy";
    static final String GUI_FACTORY = "com.github.upcraftlp.foolslib.client.FoolsConfigGui$Factory";

    //FIXME world gen for lucky blocks
    //TODO structure gen
    //TODO structure loading from .schematic --> craftdev-core

    public static final ResourceLocation LUCKY_BLOCK = new ResourceLocation(MODID, "lucky_block");
    public static final ResourceLocation LUCKY_BOW = new ResourceLocation(MODID, "lucky_bow");

    private static final Logger log = LogManager.getLogger(MODID, new PrefixMessageFactory(MOD_NAME));

    @Mod.Metadata
    public static ModMetadata metadata;

    @SidedProxy(clientSide = CLIENT_PROXY_CLASS, serverSide = SERVER_PROXY_CLASS)
    public static CommonProxy proxy;

    @Mod.EventHandler
    public void preInit(FMLPreInitializationEvent event) {
        //fill in mcmod.info details
        metadata.autogenerated = false;
        metadata.name = MOD_NAME;
        metadata.updateJSON = UPDATE_JSON;
        metadata.version = VERSION;

        proxy.preInit(event);
        log.info("Pre-Initialization finished.", new Object[0]);
    }

    @Mod.EventHandler
    public void init(FMLInitializationEvent event) {
        proxy.init(event);
        log.info("Initialization finished.", new Object[0]);
    }

    @Mod.EventHandler
    public void postInit(FMLPostInitializationEvent event) {
        proxy.postInit(event);
        log.info("Post-Initialization finished.", new Object[0]);
    }

    @Mod.EventHandler
    public void serverStarting(FMLServerStartingEvent event) {
        proxy.serverStarting(event);
        log.info("Server starting.", new Object[0]);
    }

    @Mod.EventHandler
    public void serverStopping(FMLServerStoppingEvent event) {
        proxy.serverStopping(event);
        log.info("Server stopping.", new Object[0]);
    }

    @Mod.EventHandler
    public void onIMCMessage(FMLInterModComms.IMCEvent event) {
        proxy.onIMCMessage(event);
        log.info("received {} IMC Messages.", event.getMessages().size());
    }

    public static Logger getLogger() {
        return log;
    }
}
